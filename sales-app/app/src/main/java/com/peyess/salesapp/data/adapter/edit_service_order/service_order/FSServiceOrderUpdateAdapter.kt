package com.peyess.salesapp.data.adapter.edit_service_order.service_order

import com.peyess.salesapp.data.model.sale.service_order.FSServiceOrderUpdate

fun FSServiceOrderUpdate.toMappingUpdate(): Map<String, Any> {
    return mapOf(
        "client_uid" to clientUid,
        "client_document" to clientDocument,
        "client_name" to clientName,
        "client_birthday" to clientBirthday,
        "client_phone" to clientPhone,
        "client_cellphone" to clientCellphone,
        "client_neighborhood" to clientNeighborhood,
        "client_street" to clientStreet,
        "client_city" to clientCity,
        "client_state" to clientState,
        "client_housenumber" to clientHouseNumber,
        "client_zipcode" to clientZipcode,

        "responsible_uid" to responsibleUid,
        "responsible_document" to responsibleDocument,
        "responsible_name" to responsibleName,
        "responsible_birthday" to responsibleBirthday,
        "responsible_phone" to responsiblePhone,
        "responsible_cellphone" to responsibleCellphone,
        "responsible_neighborhood" to responsibleNeighborhood,
        "responsible_street" to responsibleStreet,
        "responsible_city" to responsibleCity,
        "responsible_state" to responsibleState,
        "responsible_housenumber" to responsibleHouseNumber,
        "responsible_zipcode" to responsibleZipcode,

        "witness_uid" to witnessUid,
        "has_witness" to hasWitness,
        "witness_document" to witnessDocument,
        "witness_name" to witnessName,
        "witness_birthday" to witnessBirthday,
        "witness_phone" to witnessPhone,
        "witness_cellphone" to witnessCellphone,
        "witness_neighborhood" to witnessNeighborhood,
        "witness_street" to witnessStreet,
        "witness_city" to witnessCity,
        "witness_state" to witnessState,
        "witness_housenumber" to witnessHouseNumber,
        "witness_zipcode" to witnessZipcode,

        "has_takeaway" to hasTakeaway,
        "takeaway_name" to takeawayName,
        "takeaway_document" to takeawayDocument,

        "same_purchase_so" to samePurchaseSo,
        "payer_uids" to payerUids,
        "payer_documents" to payerDocuments,

        "has_own_frames" to hasOwnFrames,
        "left_products" to leftProducts,
        "right_products" to rightProducts,
        "frames_products" to framesProducts,
        "misc_products" to miscProducts,

        "is_copy" to isCopy,
        "professional_name" to professionalName,
        "professional_id" to professionalId,
        "prescription_date" to prescriptionDate,

        "has_addition" to hasAddition,
        "has_prism" to hasPrism,
        "l_cylinder" to lCylinder,
        "l_spheric" to lSpheric,
        "l_axis_degree" to lAxisDegree,
        "l_addition" to lAddition,
        "l_prism_axis" to lPrismAxis,
        "l_prism_degree" to lPrismDegree,
        "l_prism_pos" to lPrismPos,
        "r_cylinder" to rCylinder,
        "r_spheric" to rSpheric,
        "r_axis_degree" to rAxisDegree,
        "r_addition" to rAddition,
        "r_prism_axis" to rPrismAxis,
        "r_prism_degree" to rPrismDegree,
        "r_prism_pos" to rPrismPos,
        "l_ipd" to lIpd,
        "l_bridge" to lBridge,
        "l_diameter" to lDiameter,
        "l_he" to lHe,
        "l_horizontal_bridge_hoop" to lHorizontalBridgeHoop,
        "l_horizontal_hoop" to lHorizontalHoop,
        "l_vertical_hoop" to lVerticalHoop,
        "r_ipd" to rIpd,
        "r_bridge" to rBridge,
        "r_diameter" to rDiameter,
        "r_he" to rHe,
        "r_horizontal_bridge_hoop" to rHorizontalBridgeHoop,
        "r_horizontal_hoop" to rHorizontalHoop,
        "r_vertical_hoop" to rVerticalHoop,

        "measure_confirmed_by" to measureConfirmedBy,
        "discount_allowed_by" to discountAllowedBy,
        "full_price" to fullPrice,
        "final_price" to finalPrice,

        "observation" to observation,

        "updated" to updated,
        "updated_by" to updatedBy,
        "update_allowed_by" to updateAllowedBy,
    )
}
